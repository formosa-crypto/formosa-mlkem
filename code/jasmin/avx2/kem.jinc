require "indcpa.jinc"
require "verify.jinc"

inline
fn __crypto_kem_keypair_jazz(reg u64 pkp, reg u64 skp, reg ptr u8[KYBER_SYMBYTES*2] randomnessp)
{
  stack ptr u8[KYBER_SYMBYTES*2] s_randomnessp;
  reg ptr u8[KYBER_SYMBYTES] randomnessp1 randomnessp2;

  stack u8[32] h_pk;
  stack u64 s_skp s_pkp;
  reg u64 t64;
  inline int i;

  s_randomnessp = randomnessp;
  s_pkp = pkp;
  s_skp = skp;

  randomnessp1 = randomnessp[0:KYBER_SYMBYTES];
  __indcpa_keypair(pkp, skp, randomnessp1);

  skp = s_skp;
  skp += KYBER_POLYVECBYTES;
  pkp = s_pkp;

  for i=0 to KYBER_INDCPA_PUBLICKEYBYTES/8
  {
    t64 = (u64)[pkp + 8*i];
    (u64)[skp] = t64;
    skp += 8;
  }

  s_skp = skp;
  pkp = s_pkp;
  t64 = KYBER_PUBLICKEYBYTES;
  h_pk = _sha3_256_avx2(h_pk, pkp, t64);
  skp = s_skp;

  for i=0 to 4
  {
    t64 = h_pk[u64 i];
    (u64)[skp] = t64;
    skp += 8;
  }

  randomnessp = s_randomnessp;
  randomnessp2 = randomnessp[KYBER_SYMBYTES:KYBER_SYMBYTES];
  for i=0 to KYBER_SYMBYTES/8
  {
    t64 = randomnessp2[u64 i];
    (u64)[skp] = t64;
    skp += 8;
  }
}

inline
fn __crypto_kem_enc_jazz(reg u64 ctp, reg u64 shkp, reg u64 pkp, reg ptr u8[KYBER_SYMBYTES] randomnessp)
{
  inline int i;

  stack u8[KYBER_SYMBYTES * 2] buf kr;
  stack u64 s_pkp s_ctp s_shkp;
  reg u64 t64;

  s_pkp = pkp;
  s_ctp = ctp;
  s_shkp = shkp;
  
  for i=0 to KYBER_SYMBYTES/8
  {
    t64 = randomnessp[u64 i];
    kr[u64 i] = t64;
  }

  t64 = KYBER_SYMBYTES;
  buf[0:KYBER_SYMBYTES] = _sha3_256_32_avx2(buf[0:KYBER_SYMBYTES], kr[0:KYBER_SYMBYTES]);

  pkp = s_pkp;

  t64 = KYBER_PUBLICKEYBYTES;
  buf[KYBER_SYMBYTES:KYBER_SYMBYTES] = _sha3_256_avx2(buf[KYBER_SYMBYTES:KYBER_SYMBYTES], pkp, t64);

  kr = __sha3_512_64_avx2(kr, buf);

  pkp = s_pkp;

  __indcpa_enc_0(s_ctp, buf[0:KYBER_INDCPA_MSGBYTES], pkp, kr[KYBER_SYMBYTES:KYBER_SYMBYTES]);

  ctp = s_ctp;
  t64 = KYBER_INDCPA_CIPHERTEXTBYTES;
  kr[KYBER_SYMBYTES:KYBER_SYMBYTES] = _sha3_256_avx2(kr[KYBER_SYMBYTES:KYBER_SYMBYTES], ctp, t64);

  shkp = s_shkp;
  //t64 = KYBER_SSBYTES;
  //_shake256_64(shkp, t64, kr);
  _shake256_m32_64_avx2(shkp, kr);
}

inline
fn __crypto_kem_dec_jazz(reg u64 shkp, reg u64 ctp, reg u64 skp)
{
  stack u8[KYBER_INDCPA_CIPHERTEXTBYTES] ctpc;
  stack u8[2*KYBER_SYMBYTES] kr buf;
  stack u64 s_skp s_ctp s_shkp;
  reg u64 pkp hp zp t64 cnd;
  inline int i;

  s_shkp = shkp;
  s_ctp = ctp;

  buf[0:KYBER_INDCPA_MSGBYTES] = __indcpa_dec_1(buf[0:KYBER_INDCPA_MSGBYTES], ctp, skp);

  hp = skp + 32;
  hp += 24 * KYBER_K * KYBER_N>>3;

  for i=0 to KYBER_SYMBYTES/8
  {
    t64 = (u64)[hp + 8*i];
    buf.[u64 KYBER_SYMBYTES + 8*i] = t64;
  }

  s_skp = skp;

  kr = __sha3_512_64_avx2(kr, buf);

  pkp = s_skp;
  pkp += 12 * KYBER_K * KYBER_N>>3;

  ctpc = __indcpa_enc_1(ctpc, buf[0:KYBER_INDCPA_MSGBYTES], pkp, kr[KYBER_SYMBYTES:KYBER_SYMBYTES]);

  ctp = s_ctp;
  cnd = __verify(ctp, ctpc);

  zp = s_skp;
  zp += 64;
  zp += 24 * KYBER_K * KYBER_N>>3;
  kr[0:KYBER_SYMBYTES] = __cmov(kr[0:KYBER_SYMBYTES], zp, cnd);

  t64 = KYBER_INDCPA_CIPHERTEXTBYTES;
  kr[KYBER_SYMBYTES:KYBER_SYMBYTES] = _sha3_256_avx2(kr[KYBER_SYMBYTES:KYBER_SYMBYTES], ctp, t64);

  shkp = s_shkp;
  //t64 = KYBER_SSBYTES;
  //_shake256_64(shkp, t64, kr);
  _shake256_m32_64_avx2(shkp, kr);
}
