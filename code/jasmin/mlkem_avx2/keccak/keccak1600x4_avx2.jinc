require "keccakf1600x4_avx2.jinc"
require "keccakf1600_globals.jinc"
require "subreadwrite_imem.jinc"

/*
   STATE INIT
   ==========
*/
inline fn __state_init_avx2x4
( reg mut ptr u256[25] st
) -> reg ptr u256[25]
{
  reg u64 i;
  reg u256 z256;
  z256 = #set0_256();
  i = 0;
  while (i < 32*25) {
    st.[u256 (int) i] = z256;
    i += 32; 
  }
  return st;
}

/*
   ADD RATE BIT
   ============
*/

inline fn __addratebit_avx2x4
( reg mut ptr u256[25] st
, inline int RATE8
) -> reg ptr u256[25]
{
  reg u256 t256;
  reg u128 t128;
  reg u64 t64;
  t64 = 1;
  t64 <<= (8*RATE8-1) % 64; // obs: should be 63 for all admissible rates!
  t128 = (128u) t64;
  t256 = #VPBROADCAST_4u64(t128);
  t256 ^= st[(RATE8-1)/8];
  st[(RATE8-1)/8] = t256;
  return st;
}

/*
    State25 to/from State4x25
    =========================
*/
// pack 4 keccak states (st25) into a 4-way state (st4x)
inline fn __u256x4_4u64x4
( reg u256 x0 x1 x2 x3
) -> reg u256, reg u256, reg u256, reg u256 {
  // x0 = l00 l01  l02 l03
  // x1 = l10 l11  l12 l13
  // x2 = l20 l21  l22 l23
  // x3 = l30 l31  l32 l33
  reg u256 y0, y1, y2, y3;
  y0 = #VPUNPCKL_4u64(x0, x1);	// y0 = l00 l10  l02 l12
  y1 = #VPUNPCKH_4u64(x0, x1);	// y1 = l01 l11  l03 l13
  y2 = #VPUNPCKL_4u64(x2, x3);	// y2 = l20 l30  l22 l32
  y3 = #VPUNPCKH_4u64(x2, x3);	// y3 = l21 l31  l23 l33

  x0 = #VPERM2I128(y0, y2, 0x20);	// x0 = l00 l10  l20 l30
  x1 = #VPERM2I128(y1, y3, 0x20);	// x1 = l01 l11  l21 l31
  x2 = #VPERM2I128(y0, y2, 0x31);	// x2 = l02 l12  l22 l32
  x3 = #VPERM2I128(y1, y3, 0x31);	// x3 = l03 l13  l23 l33

  return x0, x1, x2, x3;
}

// extracts 4 keccak states (st25) from a 4-way state (st4x)
inline fn __4u64x4_u256x4
( reg u256 y0 y1 y2 y3
) -> reg u256, reg u256, reg u256, reg u256 {
  // y0 = l00 l10  l20 l30
  // y1 = l01 l11  l21 l31
  // y2 = l02 l12  l22 l32
  // y3 = l03 l13  l23 l33
  reg u256 x0, x1, x2, x3;
  x0 = #VPERM2I128(y0, y2, 0x20);	// x0 = l00 l10  l02 l12
  x1 = #VPERM2I128(y1, y3, 0x20);	// x1 = l01 l11  l03 l13
  x2 = #VPERM2I128(y0, y2, 0x31);	// x2 = l20 l30  l22 l32
  x3 = #VPERM2I128(y1, y3, 0x31);	// x3 = l21 l31  l23 l33

  y0 = #VPUNPCKL_4u64(x0, x1);	// y0 = l00 l01  l02 l03
  y1 = #VPUNPCKH_4u64(x0, x1);	// y1 = l10 l11  l12 l13
  y2 = #VPUNPCKL_4u64(x2, x3);	// y2 = l20 l21  l22 l23
  y3 = #VPUNPCKH_4u64(x2, x3);	// y3 = l30 l31  l32 l33

  return y0, y1, y2, y3;
}
