/* DEPENDENCIES:
require "keccak1600_orig_avx2.jinc"
param int ASIZE=101;
*/

inline fn __addarray_full_block_avx2
( reg u256[7] state
, stack u64[28] s_state
, reg ptr u64[25] a_jagged_p
, reg const ptr u8[ASIZE] in
, reg u64 offset
, reg u64 inlen
, reg u64 rate
) -> reg u256[7] /* st */
   , stack u64[28] /* pst */
   , reg u64 /* offset */
   , reg u64 /* inlen */
{

  inline int i;
  reg u64 j l t rate8;

  rate8 = rate;
  rate8 >>= 3;
  j = 0;
  while ( j < rate8 )
  {
    t = in.[u64 offset + 8*j];
    l = a_jagged_p[(int) j];
    s_state[(int) l] = t;
    j += 1;
  }

  //TODO: check & change to #VPBROADCAST_4u64
  t = s_state[0];
  s_state[1] = t;
  s_state[2] = t;
  s_state[3] = t;

  for i = 0 to 7
  { state[i] ^= s_state[u256 i]; }

  offset += rate;
  inlen -= rate;

  return state, s_state, offset, inlen;
}


// TODO: refactor when this feature is available: https://github.com/haslab/libjbn/wiki/Feature-request-%231#procedural-parameters
inline fn __addarray_final_block_avx2
( reg  u256[7] state
, stack u64[28] s_state
, reg ptr u64[25] a_jagged_p
, reg const ptr u8[ASIZE] in
, reg u64 offset
, reg u64 inlen
, reg  u8 trail_byte
, reg u64 rate
) -> reg u256[7]
{
  inline int i;
  reg u64 j l t inlen8;
  reg u8 c;

  s_state = __init_s_state_avx2();

  inlen8 = inlen;
  inlen8 >>= 3;
  j = 0;
  while ( j < inlen8 )
  {
    t = in.[u64 offset + 8*j];
    l = a_jagged_p[(int) j];
    s_state[(int) l] = t;
    j += 1;
  }
  l = a_jagged_p[(int) j];
  l <<= 3;
  j <<= 3;

  while ( j < inlen )
  {
    c = in.[u8 offset + j];
    s_state[u8 (int) l] = c;
    j += 1;
    l += 1;
  }

  s_state[u8 (int) l] = trail_byte;

  // j  = (rate-1) >> 3;
  j = rate; j -= 1; j >>= 3;
  l  = a_jagged_p[(int) j];
  l <<= 3;
  // l += ((rate-1) & 0x7)
  j = rate; j -= 1; j &= 0x7;
  l += j;

  s_state[u8 (int) l] ^= 0x80;

  t = s_state[0];
  s_state[1] = t;
  s_state[2] = t;
  s_state[3] = t;

  for i = 0 to 7
  { state[i] ^= s_state[u256 i]; }

  return state;
}


// obs: @pre: len <= rate_in_bytes
inline fn __xtrarray_full_block_avx2
( reg u256[7] state
, reg ptr u64[25] a_jagged_p
, reg mut ptr u8[ASIZE] out
, reg u64 offset
, reg u64 len
) -> reg ptr u8[ASIZE] /* out */
   , reg u64 /* offset */
{
  inline int i;
  stack u64[28] s_state;
  reg u64 j l t len8;

  for i = 0 to 7
  { s_state[u256 i] = state[i]; }

  len8 = len;
  len8 >>= 3;
  j = 0;
  while ( j < len8 )
  {
    l = a_jagged_p[(int) j];
    t = s_state[(int) l];
    out.[u64 offset + 8*j] = t;
    j += 1;
  }

  offset += len;

  return out, offset;
}


// obs: @pre: len <= rate_in_bytes
inline fn __xtrarray_bytes_avx2
( reg u256[7] state
, reg ptr u64[25] a_jagged_p
, reg mut ptr u8[ASIZE] out
, reg u64 offset
, reg u64 len
) -> reg ptr u8[ASIZE] /* out */
   , reg u64 /* offset */
{
  inline int i;
  stack u64[28] s_state;
  reg u64 j l t len8;
  reg u8 c;

  for i = 0 to 7
  { s_state[u256 i] = state[i]; }

  len8 = len;
  len8 >>= 3;
  j = 0;
  while ( j < len8 )
  { l = a_jagged_p[(int) j];
    t = s_state[(int) l];
    out.[u64 offset + 8*j] = t;
    j += 1;
  }
  l = a_jagged_p[(int)j];
  j <<= 3;
  l <<= 3;

  while ( j < len )
  {
    c = s_state[u8 (int) l];
    out.[u8 offset + j] = c;
    j += 1;
    l += 1;
  }

  offset += len;

  return out, offset;
}


inline fn __absorbarray_avx2
( reg const ptr u8[ASIZE] in
, reg u64 offset
, reg u64 inlen
, reg u8  trail_byte
, reg u64 rate
) -> reg u256[7]
{ reg u256[7] state;
  stack u64[28] s_state;
  reg ptr u64[25] a_jagged_p;

  a_jagged_p = KECCAK_A_JAGGED;
  s_state = __init_s_state_avx2();

  // intermediate blocks
  while ( inlen >= rate )
  {
    state, s_state, offset, inlen = __addarray_full_block_avx2(state, s_state, a_jagged_p, in, offset, inlen, rate);
    state = _keccakf1600_avx2_(state);
  }

  // final block
  state = __addarray_final_block_avx2(state, s_state, a_jagged_p, in, offset, inlen, trail_byte, rate);

  return state;
}


inline fn __squeezearray_avx2
( reg u256[7] state
, reg mut ptr u8[ASIZE] out
, reg u64 offset
, reg u64 outlen
, reg u64 rate
) -> reg ptr u8[ASIZE] /* out */
   , reg u64 /* offset */
   , reg u256[7] /* state */
{
  reg ptr u64[25] a_jagged_p;

  a_jagged_p = KECCAK_A_JAGGED;

  // intermediate blocks
  while ( outlen > rate )
  {
    state = _keccakf1600_avx2_(state);
    out, offset = __xtrarray_full_block_avx2(state, a_jagged_p, out, offset, rate);
    outlen -= rate;
  }

  state = _keccakf1600_avx2_(state);
  out, offset = __xtrarray_bytes_avx2(state, a_jagged_p, out, offset, outlen);
  return out, offset, state;
}

