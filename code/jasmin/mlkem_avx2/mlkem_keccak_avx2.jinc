require "keccak/keccak1600_imem_avx2.jinc"
require "keccak/keccak1600x4_imem_avx2.jinc"

namespace A1 {
  param int ASIZE = 1;
  require "keccak/keccak1600_array_avx2_ASIZE.jinc"
  require "keccak/keccak1600x4_array_avx2_ASIZE.jinc"
}

namespace A2 {
  param int ASIZE = 2;
  require "keccak/keccak1600_array_avx2_ASIZE.jinc"
  require "keccak/keccak1600x4_array_avx2_ASIZE.jinc"
}

namespace A32 {
  param int ASIZE = 32;
  require "keccak/keccak1600_array_avx2_ASIZE.jinc"
  require "keccak/keccak1600x4_array_avx2_ASIZE.jinc"
}

namespace A64 {
  param int ASIZE = 64;
  require "keccak/keccak1600_array_avx2_ASIZE.jinc"
}

namespace A128 {
  param int ASIZE = 128;
  require "keccak/keccak1600_array_avx2_ASIZE.jinc"
  require "keccak/keccak1600x4_array_avx2_ASIZE.jinc"
}

namespace ABUFLEN {
  param int ASIZE = 536;
  require "keccak/keccak1600_array_avx2_ASIZE.jinc"
  require "keccak/keccak1600x4_array_avx2_ASIZE.jinc"
}


fn _sha3_256A_A32
( #spill_to_mmx reg mut ptr u8[32] out
, reg const ptr u8[32] in
) -> reg ptr u8[32]
{ reg u256[7] st;
  reg u64 offset;
  st = __state_init_avx2();
  offset = 0;
  st, _ = A32::__absorb_array_avx2(st, in, offset, 32, R136, SHA3);
  offset = 0;
  out, _ = A32::__squeeze_array_avx2(out, offset, 32, st, R136);
  return out;
}

fn _sha3_256A_M1184
( #spill_to_mmx reg mut ptr u8[32] out
, #spill_to_mmx reg u64 in
) -> reg ptr u8[32]
{ reg u256[7] st;
  reg u64 offset;
  st = __state_init_avx2();
  st, _ = __absorb_imem_avx2(st, in, 1184, R136, SHA3);
  offset = 0;
  out, _ = A32::__squeeze_array_avx2(out, offset, 32, st, R136);
  return out;
}

fn _sha3_512A_A32
( #spill_to_mmx reg mut ptr u8[64] out
, reg const ptr u8[32] in
) -> reg ptr u8[64]
{ reg u256[7] st;
  reg u64 offset;
  st = __state_init_avx2();
  offset = 0;
  st, _ = A32::__absorb_array_avx2(st, in, offset, 32, R72, SHA3);
  offset = 0;
  out, _ = A64::__squeeze_array_avx2(out, offset, 64, st, R72);
  return out;
}

fn _sha3_512A_A64
( reg mut ptr u8[64] out
, reg const ptr u8[64] in
) -> reg ptr u8[64]
{ reg u256[7] st;
  reg u64 offset;
  st = __state_init_avx2();
  offset = 0;
  st, _ = A64::__absorb_array_avx2(st, in, offset, 64, R72, SHA3);
  offset = 0;
  out, _ = A64::__squeeze_array_avx2(out, offset, 64, st, R72);
  return out;
}

fn _shake256_M32__M32_M1088
( reg u64 out
, reg u64 in0 in1 // 32+MLKEM_INDCPA_CIPHERTEXTBYTES
)
{ reg u256[7] st;
  stack u64[25] pst_s;
  reg ptr u64[25] pst;
  st = __state_init_avx2();
  pst = pst_s;
  pst = __pstate_init_avx2(pst);
  pst, _, st, _ = __pabsorb_imem_avx2(pst, 0, st, in0, 32, R136, UNFINISHED);
  pst, _, st, _ = __pabsorb_imem_avx2(pst, 32, st, in1, 1088, R136, SHAKE);
  _, _ = __squeeze_imem_avx2(out, 32, st, R136);
}

fn _shake256_A128__A32_A1
( reg mut ptr u8[128] out
, reg const ptr u8[32] seed
, reg const ptr u8[1] nonce
) -> reg ptr u8[128]
{ reg u256[7] st;
  stack u64[25] pst_s;
  reg ptr u64[25] pst;
  reg u64 offset;
  st = __state_init_avx2();
  pst_s = pst;
  pst = __pstate_init_avx2(pst);
  offset = 0;
  pst, _, st, _ = A32::__pabsorb_array_avx2(pst, 0, st, seed, offset, 32, R136, UNFINISHED);
  offset = 0;
  pst, _, st, _ = A1::__pabsorb_array_avx2(pst, 32, st, nonce, offset, 1, R136, SHAKE);
  offset = 0;
  out, _ = A128::__squeeze_array_avx2(out, offset, 128, st, R136);

  return out;
}

fn _shake256x4_A128__A32_A1
( reg mut ptr u8[128] out0 out1 out2 out3
, reg const ptr u8[32] seed
, reg const ptr u8[4] nonces
) -> reg ptr u8[128] /* out0 */
   , reg ptr u8[128] /* out1 */
   , reg ptr u8[128] /* out2 */
   , reg ptr u8[128] /* out3 */
{ stack u256[25] st_s;
  reg ptr u256[25] st;
  reg u64 offset;
  st = st_s;
  st = __state_init_avx2x4(st);
  offset = 0;
  st, _, _ = A32::__absorb_bcast_array_avx2x4(st, 0, seed, offset, 32, R136, UNFINISHED);
  offset = 0;
  st, _, _ = A1::__absorb_array_avx2x4(st, 32, nonces[0:1], nonces[1:1], nonces[2:1], nonces[3:1], offset, 1, R136, SHAKE);
  offset = 0;
  out0, out1, out2, out3, _, st
    = A128::__squeeze_array_avx2x4(out0, out1, out2, out3, offset, 128, st, R136);
  st_s = st;

  return out0, out1, out2, out3;
}

fn _shake128_absorb_A32_A2
( reg const ptr u8[32] seed
, reg const ptr u8[2] pos
) -> reg u256[7]
{ reg u256[7] st;
  stack u64[25] pst_s;
  reg ptr u64[25] pst;
  reg u64 offset;
  st = __state_init_avx2();
  pst = pst_s;
  pst = __pstate_init_avx2(pst);
  offset = 0;
  pst, _, st, _ = A32::__pabsorb_array_avx2(pst, 0, st, seed, offset, 32, R168, UNFINISHED);
  offset = 0;
  pst, _, st, _ = A2::__pabsorb_array_avx2(pst, 32, st, pos, offset, 2, R168, SHAKE);

  return st;
}

fn _shake128x4_absorb_A32_A2
( reg mut ptr u256[25] st
, reg const ptr u8[32] seed
, reg const ptr u8[4*2] pos
) -> reg ptr u256[25]
{ inline int AT;
  reg u64 offset;
  st = __state_init_avx2x4(st);
  offset = 0;
  st, AT, _ = A32::__absorb_bcast_array_avx2x4(st, 0, seed, offset, 32, R168, UNFINISHED);
  offset = 0;
  st, _, _ = A2::__absorb_array_avx2x4(st, AT, pos[0:2], pos[2:2], pos[4:2], pos[6:2], offset, 2, R168, SHAKE);

  return st;
}

fn _shake128_squeeze3blocks
( reg mut ptr u8[ABUFLEN::ASIZE] buf
, reg u256[7] st 
) -> reg ptr u8[ABUFLEN::ASIZE]
{
 reg u64 offset;
 st = _keccakf1600_avx2(st);
 offset = 0;
 buf, offset = ABUFLEN::__dumpstate_array_avx2(buf, offset, R168, st);
 st = _keccakf1600_avx2(st);
 buf, offset = ABUFLEN::__dumpstate_array_avx2(buf, offset, R168, st);
 st = _keccakf1600_avx2(st);
 buf, offset = ABUFLEN::__dumpstate_array_avx2(buf, offset, 200, st);
 return buf;
}

fn _shake128_next_state
( reg mut ptr u8[ABUFLEN::ASIZE] buf
) -> reg ptr u8[ABUFLEN::ASIZE] /* buf */
{
 reg u256[7] st;
 reg ptr u64[25] pst;
 reg u64 offset;
 pst = buf[u64 2*(168/8) : 25];
 st = __state_from_pstate_avx2(pst); 
 st = _keccakf1600_avx2(st);
 offset = 2*168;
 buf, _ = ABUFLEN::__dumpstate_array_avx2(buf, offset, 200, st);
 return buf;
}

fn _shake128x4_squeeze3blocks
( reg mut ptr u256[25] st
, reg mut ptr u8[4*ABUFLEN::ASIZE] buf
) -> reg ptr u256[25]   /* st */
   , reg ptr u8[4*ABUFLEN::ASIZE] /* buf */
{
 reg ptr u8[ABUFLEN::ASIZE] buf0 buf1 buf2 buf3;
 reg u64 offset;
 buf0 = buf[0*ABUFLEN::ASIZE : ABUFLEN::ASIZE];
 buf1 = buf[1*ABUFLEN::ASIZE : ABUFLEN::ASIZE];
 buf2 = buf[2*ABUFLEN::ASIZE : ABUFLEN::ASIZE];
 buf3 = buf[3*ABUFLEN::ASIZE : ABUFLEN::ASIZE];
 offset = 0;
 st = _keccakf1600_avx2x4(st);
 buf0, buf1, buf2, buf3, offset
  = ABUFLEN::__dumpstate_array_avx2x4(buf0, buf1, buf2, buf3, offset, R168, st);
 st = _keccakf1600_avx2x4(st);
 buf0, buf1, buf2, buf3, offset
  = ABUFLEN::__dumpstate_array_avx2x4(buf0, buf1, buf2, buf3, offset, R168, st);
 st = _keccakf1600_avx2x4(st);
 buf0, buf1, buf2, buf3, offset
  = ABUFLEN::__dumpstate_array_avx2x4(buf0, buf1, buf2, buf3, offset, 200, st);
 buf[0*ABUFLEN::ASIZE : ABUFLEN::ASIZE] = buf0;
 buf[1*ABUFLEN::ASIZE : ABUFLEN::ASIZE] = buf1;
 buf[2*ABUFLEN::ASIZE : ABUFLEN::ASIZE] = buf2;
 buf[3*ABUFLEN::ASIZE : ABUFLEN::ASIZE] = buf3;

 return st, buf;
}
