require "fips202.jinc"
require "params.jinc"

inline
fn __rej_uniform(stack u16[KYBER_N] rp, reg u64 offset, stack u8[SHAKE128_RATE] buf) ->  reg u64, stack u16[KYBER_N]
{
  reg u16 val1 val2;
  reg u16 t;
  reg u64 pos ctr;


  ctr = offset;
  pos = 0;

  while {
    val1 = (16u)buf[(int)pos];
    pos += 1;
    t   = (16u)buf[(int)pos];
    val2 = t;
    val2 >>= 4;
    t &= 0x0F;
    t <<= 8;
    val1 |= t;
    pos += 1;

    t   = (16u)buf[(int)pos];
    t <<= 4;
    val2 |= t;
    pos += 1;

    if(val1 < KYBER_Q)
    {
        if(ctr < KYBER_N) {
            rp[(int)ctr] = val1;
            ctr += 1;
        }
    }

    if(val2 < KYBER_Q)
    {
      if(ctr < KYBER_N)
      {
        rp[(int)ctr] = val2;
        ctr += 1;
      }
    }

  //TODO: (potentially) wasting 2 'good' bytes
  } (pos < SHAKE128_RATE - 2)

  return ctr, rp;
}

inline
fn __gen_matrix(stack u8[KYBER_SYMBYTES] seed, reg u64 transposed) -> stack u16[KYBER_K*KYBER_VECN]
{
  stack u8[34] extseed;
  stack u8[SHAKE128_RATE] buf;
  stack u64[25] state;
  stack u16[KYBER_N] poly;
  stack u16[KYBER_K*KYBER_VECN] r;

  reg u8 c;
  reg u16 t;
  reg u64 ctr k l;
  stack u64 sctr;
  stack u64 stransposed;
  inline int j i;

  stransposed = transposed;

  for j = 0 to KYBER_SYMBYTES
  {
    c = seed[j];
    extseed[j] = c;
  }

  for i=0 to KYBER_K
  {
    for j = 0 to KYBER_K
    {
      transposed = stransposed;
      if(transposed == 0)
      {
        extseed[KYBER_SYMBYTES] = j;
        extseed[KYBER_SYMBYTES+1] = i;
      }
      else
      {
        extseed[KYBER_SYMBYTES] = i;
        extseed[KYBER_SYMBYTES+1] = j;
      }

      state = _shake128_absorb34(state, extseed);

      // Initialize the poly array
      ctr = 0;
      #bounded
      while (ctr < KYBER_N / 4) {
        poly[u64 (int) ctr] = ctr;
        ctr += 1;
      }

      ctr = 0;
      #no_termination_check
      while (ctr < KYBER_N)
      {
        sctr = ctr;
        state, buf = _shake128_squeezeblock(state, buf);
        ctr = sctr;
        ctr, poly  = __rej_uniform(poly, ctr, buf);
      }

      k = 0;
      l = i * KYBER_VECN + j * KYBER_N;
      #bounded
      while (k < KYBER_N)
      {
        t = poly[(int) k];
        r[(int) l] = t;
        k += 1;
        l += 1;
      }
    }
  }
  return r;
}
